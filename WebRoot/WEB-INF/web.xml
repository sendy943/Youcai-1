<?xml version="1.0" encoding="UTF-8"?><web-app version="2.5" 	xmlns="http://java.sun.com/xml/ns/javaee" 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">    <welcome-file-list>        <welcome-file>index.jsp</welcome-file>    </welcome-file-list>        <!-- FCK上传文件 注：struts2拦截/*，拦截了fck上传请求，要重写拦截器才能解决上传问题 -->    <servlet>      <servlet-name>Connector</servlet-name>      <servlet-class>net.fckeditor.connector.ConnectorServlet</servlet-class>      <load-on-startup>1</load-on-startup>    </servlet>    <servlet-mapping>      <servlet-name>Connector</servlet-name>      <url-pattern>/fckeditor/editor/filemanager/connectors/*</url-pattern>    </servlet-mapping>        <!-- 常量application -->    <context-param>      <param-name>typeCount</param-name>      <param-value>4</param-value>    </context-param>    <context-param>      <param-name>type1</param-name>      <param-value>男装</param-value>    </context-param>    <context-param>      <param-name>type2</param-name>      <param-value>女装</param-value>    </context-param>    <context-param>      <param-name>type3</param-name>      <param-value>内衣</param-value>    </context-param>    <context-param>      <param-name>type4</param-name>      <param-value>配件</param-value>    </context-param>        <context-param>		<param-name>contextConfigLocation</param-name>		<param-value>classpath:beans.xml</param-value>	</context-param>  	  	<!-- spring监听器 -->    <listener>		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>	</listener>		<!-- 自定义session监听器 -->    <listener>		<listener-class>com.$2012.web.listener.SiteSessionListener</listener-class>	</listener>		<!-- 页面全局缓存过滤器  更新数据后在页面数据展示之前执行<oscache:flush scope="application" /> 	     全局缓存适合于整个页面不需要及时更新的页面，本项目中有两处采用了局部缓存	-->	<!-- 	<filter>		    <filter-name>CacheFilter</filter-name>		    <filter-class>com.opensymphony.oscache.web.filter.CacheFilter</filter-class>		    <init-param>		        <param-name>time</param-name>		        <param-value>7200</param-value>		    </init-param>		    <init-param>		        <param-name>scope</param-name>		        <param-value>application</param-value>		    </init-param>	</filter>	<filter-mapping>		    <filter-name>CacheFilter</filter-name>		    <url-pattern>/front/product/list/*</url-pattern>	</filter-mapping>	 -->	<!-- 自定义用户登录过滤器,filter比interceptor配置	（相关package extends 配有interceptor的package，	正因如此，interceptor稍微灵活点）简单点 -->	<filter>		<filter-name>UserLoginFilter</filter-name>		<filter-class>com.$2012.web.filter.UserLoginFilter</filter-class>	</filter>	<filter-mapping>		<filter-name>UserLoginFilter</filter-name>		<url-pattern>/customer/*</url-pattern>	</filter-mapping>	<filter>		<filter-name>UserLoginFilter2</filter-name>		<filter-class>com.$2012.web.filter.UserLoginFilter2</filter-class>	</filter>	<filter-mapping>		<filter-name>UserLoginFilter2</filter-name>		<url-pattern>/mycenter/*</url-pattern>	</filter-mapping>		<!-- 自定义员工登录过滤器 -->	<filter>		<filter-name>EmpLoginFilter</filter-name>		<filter-class>com.$2012.web.filter.EmpLoginFilter</filter-class>	</filter>	<filter-mapping>		<filter-name>EmpLoginFilter</filter-name>		<url-pattern>/control/*</url-pattern>	</filter-mapping>	<!-- 自定义模板的编码过滤器	<filter>        <filter-name>codeFilter</filter-name>        <filter-class>com.$2012.web.filter.InitVMFilter</filter-class>    </filter>    <filter-mapping>        <filter-name>codeFilter</filter-name>        <url-pattern>*.do</url-pattern>    </filter-mapping>    <filter-mapping>        <filter-name>codeFilter</filter-name>        <url-pattern>*.jsp</url-pattern>    </filter-mapping> -->        <!-- 在Freemarker中使用Struts2标签    <servlet>        <servlet-name>JspSupportServlet</servlet-name>        <servlet-class>            org.apache.struts2.views.JspSupportServlet        </servlet-class>        <load-on-startup>1</load-on-startup>    </servlet> -->		<!-- struts2.1 org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter	即使在struts.xml里设encoding，也会出现中文乱码问题	下面的encodingFilter能解决此问题 -->	<filter>		<filter-name>encodingFilter</filter-name>		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>		<init-param>			<param-name>encoding</param-name>			<param-value>gbk</param-value>		</init-param>	</filter>	<filter-mapping>		<filter-name>encodingFilter</filter-name>		<url-pattern>/*</url-pattern>	</filter-mapping>		<!-- types,entry  取出types后session关了	 ${fn:length(entry.childTypes)} 而一对多默认延迟加载，即还没发sql语句，于是会报no session异常-->	<filter>		<filter-name>openSessionInView</filter-name>		<filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>		<init-param>			<param-name>sessionFactoryBeanName</param-name>			<param-value>sessionFactory</param-value>		</init-param>	</filter>	<filter-mapping>		<filter-name>openSessionInView</filter-name>		<url-pattern>/*</url-pattern>	</filter-mapping>		<!-- struts2.1+ --> 	<filter>		<filter-name>struts2</filter-name>		<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>	</filter>	<filter-mapping>		<filter-name>struts2</filter-name>		<url-pattern>/*</url-pattern>	</filter-mapping></web-app>